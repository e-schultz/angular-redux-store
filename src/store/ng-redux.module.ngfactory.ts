/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '@angular/core';
import * as import1 from './ng-redux.module';
import * as import2 from './components/dev-tools';
import * as import3 from './components/ng-redux';
class NgReduxModuleInjector extends import0.ÉµNgModuleInjector<import1.NgReduxModule> {
  _NgReduxModule_0:import1.NgReduxModule;
  __NgRedux_1:any;
  __DevToolsExtension_2:import2.DevToolsExtension;
  constructor(parent:import0.Injector) {
    super(parent,([] as any[]),([] as any[]));
  }
  get _NgRedux_1():any {
    if ((this.__NgRedux_1 == null)) { (this.__NgRedux_1 = import1._ngReduxFactory(this.parent.get(import0.NgZone))); }
    return this.__NgRedux_1;
  }
  get _DevToolsExtension_2():import2.DevToolsExtension {
    if ((this.__DevToolsExtension_2 == null)) { (this.__DevToolsExtension_2 = new import2.DevToolsExtension(this.parent.get(import0.ApplicationRef),this._NgRedux_1)); }
    return this.__DevToolsExtension_2;
  }
  createInternal():import1.NgReduxModule {
    this._NgReduxModule_0 = new import1.NgReduxModule();
    return this._NgReduxModule_0;
  }
  getInternal(token:any,notFoundResult:any):any {
    if ((token === import1.NgReduxModule)) { return this._NgReduxModule_0; }
    if ((token === import3.NgRedux)) { return this._NgRedux_1; }
    if ((token === import2.DevToolsExtension)) { return this._DevToolsExtension_2; }
    return notFoundResult;
  }
  destroyInternal():void {
  }
}
export const NgReduxModuleNgFactory:import0.NgModuleFactory<import1.NgReduxModule> = new import0.NgModuleFactory<any>(NgReduxModuleInjector,import1.NgReduxModule);